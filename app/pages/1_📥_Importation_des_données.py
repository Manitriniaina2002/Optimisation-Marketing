"""
Page d'importation des donn√©es pour l'application d'analyse marketing.
Permet d'importer des documents explicatifs et des fichiers de donn√©es.
"""

import streamlit as st
import pandas as pd
import os
from io import StringIO
from datetime import datetime
import base64
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au chemin pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from utils.csv_importer import load_csv

# Configuration de la page
st.set_page_config(
    page_title="üìä Importation des donn√©es - Tableau de bord",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√©
st.markdown("""
    <style>
    .main {
        background-color: #f8f9fa;
    }
    .stButton>button {
        border-radius: 20px;
        border: 1px solid #4CAF50;
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #45a049;
        color: white;
    }
    .stAlert {
        border-radius: 10px;
    }
    .stExpander {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        border-radius: 10px 10px 0 0 !important;
    }
    </style>
""", unsafe_allow_html=True)

# Titre de la page avec ic√¥ne
st.markdown("""
<div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <h1 style="margin: 0;">üì• Importation des donn√©es</h1>
</div>
""", unsafe_allow_html=True)

# V√©rifier si les donn√©es sont d√©j√† charg√©es
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
    st.session_state.customers_df = None
    st.session_state.orders_df = None
    st.session_state.marketing_df = None
    st.session_state.products_df = None
    st.session_state.documents = []

# Ajouter le r√©pertoire parent au chemin pour les imports
from pathlib import Path
import sys
sys.path.append(str(Path(__file__).parent.parent))

from utils.data_loader import DataLoader, display_data_preview
from utils.visualization import display_metrics
from config import APP_CONFIG, UPLOAD_DIR

# Initialisation du chargeur de donn√©es
if 'data_loader' not in st.session_state:
    st.session_state.data_loader = DataLoader(UPLOAD_DIR)

# Section d'importation des documents explicatifs
with st.expander("üìÑ Documents explicatifs", expanded=True):
    st.markdown("""
    T√©l√©chargez vos documents explicatifs (Word, PowerPoint, PDF) pour fournir un contexte suppl√©mentaire 
    √† votre analyse. Ces documents seront utilis√©s pour enrichir les rapports g√©n√©r√©s.
    """)
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        uploaded_docs = st.file_uploader(
            "S√©lectionnez un ou plusieurs documents",
            type=APP_CONFIG['allowed_file_types']['documents'],
            accept_multiple_files=True,
            key="doc_uploader"
        )
    
    with col2:
        st.markdown("#### Types de fichiers accept√©s")
        st.markdown("""
        - üìù Word (.docx)
        - üìä PowerPoint (.pptx)
        - üìë PDF (.pdf)
        - üìÑ Texte (.txt)
        """)
    
    # Afficher la liste des documents t√©l√©vers√©s
    if uploaded_docs:
        st.markdown("#### Documents t√©l√©vers√©s")
        for doc in uploaded_docs:
            st.markdown(f"- {doc.name} ({doc.size / 1024:.1f} KB)")
    
    # Bouton pour traiter les documents
    if st.button("Traiter les documents", key="process_docs"):
        if uploaded_docs:
            with st.spinner("Traitement des documents en cours..."):
                # Ici, vous pourriez ajouter la logique pour extraire le texte des documents
                st.session_state.processed_docs = True
                st.success("Documents trait√©s avec succ√®s !")
        else:
            st.warning("Veuillez d'abord t√©l√©verser des documents.")

# Section d'importation des fichiers de donn√©es
with st.expander("üìä Donn√©es √† analyser", expanded=True):
    st.markdown("""
    T√©l√©chargez les fichiers de donn√©es n√©cessaires √† l'analyse. Assurez-vous que les fichiers sont au format CSV 
    et respectent la structure attendue pour chaque type de donn√©es.
    """)
    
    # Cr√©er des onglets pour chaque type de donn√©es
    tab1, tab2, tab3, tab4 = st.tabs([
        "üë• Clients", 
        "üõí Commandes", 
        "üì¢ Marketing", 
        "üëï Produits"
    ])
    
    with tab1:
        st.markdown("### Donn√©es clients")
        st.markdown("""
        Fichier CSV contenant les informations sur les clients.
        **Colonnes attendues** :
        - `customer_id` : Identifiant unique du client
        - `age` : √Çge du client
        - `gender` : Genre du client
        - `city` : Ville de r√©sidence
        - `registration_date` : Date d'inscription
        """)
        
        customers_file = st.file_uploader(
            "T√©l√©verser le fichier clients (customers.csv)",
            type=["csv"],
            key="customers_uploader"
        )
        
        if customers_file is not None:
            try:
                # Utiliser la fonction load_csv pour un chargement robuste
                expected_columns = ['customer_id', 'age', 'gender', 'city', 'registration_date']
                date_columns = ['registration_date']
                numeric_columns = ['age']
                
                # R√©initialiser le contenu du fichier au d√©but
                customers_file.seek(0)
                
                # Charger avec la fonction utilitaire
                customers_df = load_csv(
                    customers_file,
                    expected_columns=expected_columns,
                    date_columns=date_columns,
                    numeric_columns=numeric_columns,
                    required_columns=['customer_id', 'age']
                )
                
                if customers_df is not None:
                    # Nettoyer les noms de colonnes
                    customers_df.columns = [col.strip().lower() for col in customers_df.columns]
                    
                    # S'assurer que customer_id est une cha√Æne de caract√®res
                    if 'customer_id' in customers_df.columns:
                        customers_df['customer_id'] = customers_df['customer_id'].astype(str).str.strip()
                    
                    # V√©rifier et convertir les colonnes num√©riques
                    for col in numeric_columns:
                        if col in customers_df.columns:
                            # Remplacer les virgules par des points pour les nombres d√©cimaux
                            if customers_df[col].dtype == 'object':
                                customers_df[col] = customers_df[col].astype(str).str.replace(',', '.')
                            # Convertir en num√©rique
                            customers_df[col] = pd.to_numeric(customers_df[col], errors='coerce')
                
                st.session_state.customers_df = customers_df
                
                # Aper√ßu des donn√©es
                with st.expander("Aper√ßu des donn√©es clients", expanded=True):
                    st.dataframe(customers_df.head())
                    
                    # Afficher des m√©triques de base
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Nombre de clients", len(customers_df))
                    with col2:
                        st.metric("Colonnes", ", ".join(customers_df.columns[:3]) + "...")
                    with col3:
                        missing = customers_df.isnull().sum().sum()
                        st.metric("Valeurs manquantes", missing)
                        
            except Exception as e:
                st.error(f"Erreur lors de la lecture du fichier : {e}")
                import traceback
                st.error(f"D√©tails de l'erreur : {traceback.format_exc()}")
    
    with tab2:
        st.markdown("### üì¶ Donn√©es de commandes")
        
        # Section d'information sur les colonnes attendues
        with st.expander("‚ÑπÔ∏è Structure attendue du fichier", expanded=False):
            st.markdown("""
            Le fichier doit contenir les colonnes suivantes :
            - `order_id` : Identifiant unique de la commande
            - `customer_id` : Identifiant du client
            - `tshirt_id` : Identifiant du produit
            - `quantity` : Quantit√© command√©e
            - `price` ou `amount` : Montant total de la commande
            - `order_date` : Date de la commande (format JJ/MM/AAAA)
            """)
        
        # T√©l√©chargement du fichier
        orders_file = st.file_uploader(
            "T√©l√©verser le fichier de commandes (orders.csv)",
            type=["csv"],
            key="orders_uploader"
        )
        
        if orders_file is not None:
            # D√©finir les colonnes attendues et les types
            expected_columns = ['order_id', 'customer_id', 'tshirt_id', 'quantity', 'price', 'amount', 'order_date']
            date_columns = ['order_date']
            numeric_columns = ['quantity', 'price', 'amount']
            required_columns = ['order_id', 'customer_id', 'order_date']
            
            # Charger le fichier avec notre utilitaire
            orders_df = load_csv(
                orders_file,
                expected_columns=expected_columns,
                date_columns=date_columns,
                numeric_columns=numeric_columns,
                required_columns=required_columns
            )
            
            if orders_df is not None:
                # V√©rifier si nous avons besoin de r√©cup√©rer les prix des produits
                if ('price' not in orders_df.columns or orders_df['price'].isna().all()) and 'tshirt_id' in orders_df.columns:
                    # Essayer de charger les produits pour r√©cup√©rer les prix
                    products_file = Path("Data/tshirts.csv")
                    if products_file.exists():
                        try:
                            products_df = pd.read_csv(products_file, sep=';')
                            if 'tshirt_id' in products_df.columns and 'base_price' in products_df.columns:
                                # Cr√©er un dictionnaire de correspondance tshirt_id -> base_price
                                price_map = dict(zip(products_df['tshirt_id'], products_df['base_price']))
                                
                                # Remplir les prix manquants avec ceux des produits
                                orders_df['price'] = orders_df['tshirt_id'].map(price_map)
                                st.success("‚úÖ Les prix manquants ont √©t√© compl√©t√©s √† partir du catalogue produits.")
                                
                                # Afficher un avertissement si des prix n'ont pas pu √™tre trouv√©s
                                if orders_df['price'].isna().any():
                                    missing_prices = orders_df[orders_df['price'].isna()]['tshirt_id'].unique()
                                    st.warning(f"‚ö†Ô∏è Prix non trouv√©s pour les produits suivants : {', '.join(missing_prices)}")
                        except Exception as e:
                            st.error(f"‚ùå Erreur lors de la lecture du fichier des produits : {e}")
                
                # Calculer le montant si n√©cessaire
                if 'amount' not in orders_df.columns and 'price' in orders_df.columns and 'quantity' in orders_df.columns:
                    orders_df['amount'] = orders_df['price'] * orders_df['quantity']
                    st.success("‚úÖ La colonne 'amount' a √©t√© calcul√©e comme produit de 'price' et 'quantity'.")
                
                # V√©rifier que nous avons bien une colonne amount valide
                if 'amount' not in orders_df.columns or orders_df['amount'].isna().all():
                    st.error("‚ùå Impossible de d√©terminer la colonne de montant. Assurez-vous d'avoir une colonne 'amount' ou 'price' et 'quantity' valides.")
                    # Ne pas sauvegarder les donn√©es dans la session en cas d'erreur
                    st.session_state.orders_df = None
                else:
                    # Sauvegarder dans la session
                    st.session_state.orders_df = orders_df
                    
                    # Afficher les statistiques uniquement si les donn√©es sont valides
                    with st.expander("üìä Aper√ßu des donn√©es de commandes", expanded=True):
                        st.dataframe(orders_df.head())
                        
                        # Afficher des m√©triques de base
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üìã Nombre de commandes", len(orders_df))
                        with col2:
                            unique_customers = orders_df['customer_id'].nunique()
                            st.metric("üë• Clients uniques", unique_customers)
                        with col3:
                            date_range = orders_df['order_date'].dropna()
                            if not date_range.empty:
                                st.metric("üìÖ P√©riode couverte", 
                                        f"{date_range.min().strftime('%d/%m/%Y')} au {date_range.max().strftime('%d/%m/%Y')}")
                        
                        # Afficher les statistiques de montant si disponible
                        if 'amount' in orders_df.columns:
                            st.subheader("üìà Statistiques financi√®res")
                            amount_stats = orders_df['amount'].agg(['sum', 'mean', 'min', 'max'])
                            
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric("üíµ Chiffre d'affaires total", f"{amount_stats['sum']:,.2f} ‚Ç¨")
                            with col2:
                                st.metric("üí∞ Panier moyen", f"{amount_stats['mean']:,.2f} ‚Ç¨")
                            with col3:
                                st.metric("üõí Commande minimale", f"{amount_stats['min']:,.2f} ‚Ç¨")
                            with col4:
                                st.metric("üèÜ Commande maximale", f"{amount_stats['max']:,.2f} ‚Ç¨")
    
    with tab3:
        st.markdown("### üì¢ Donn√©es marketing")
        st.markdown("""
        Fichier CSV contenant les informations sur les campagnes marketing.
        **Colonnes attendues** :
        - `campaign_id` : Identifiant de la campagne
        - `date` : Date de la campagne
        - `channel` : Canal de diffusion
        - `spend` : Budget d√©pens√©
        - `impressions` : Nombre d'impressions
        - `clicks` : Nombre de clics
        - `conversions` : Nombre de conversions
        - `revenue` : Revenu g√©n√©r√©
        """)
        
        marketing_file = st.file_uploader(
            "T√©l√©verser le fichier marketing (marketing.csv)",
            type=["csv"],
            key="marketing_uploader"
        )
        
        if marketing_file is not None:
            # D√©finir les colonnes attendues et les types
            expected_columns = ['campaign_id', 'date', 'channel', 'spend', 'impressions', 'clicks', 'conversions', 'revenue']
            date_columns = ['date']
            numeric_columns = ['spend', 'impressions', 'clicks', 'conversions', 'revenue']
            required_columns = ['campaign_id', 'date', 'channel']
            
            # Charger le fichier avec notre utilitaire
            marketing_df = load_csv(
                marketing_file,
                expected_columns=expected_columns,
                date_columns=date_columns,
                numeric_columns=numeric_columns,
                required_columns=required_columns
            )
            
            if marketing_df is not None:
                # Sauvegarder dans la session
                st.session_state.marketing_df = marketing_df
                
                # Afficher les statistiques
                with st.expander("üìä Aper√ßu des donn√©es marketing", expanded=True):
                    st.dataframe(marketing_df.head())
                    
                    # Afficher des m√©triques de base
                    st.subheader("üìä Statistiques marketing")
                    
                    cols = st.columns(3)
                    with cols[0]:
                        st.metric("Nombre de campagnes", marketing_df['campaign_id'].nunique())
                    
                    if 'spend' in marketing_df.columns:
                        with cols[1]:
                            total_spend = marketing_df['spend'].sum()
                            st.metric("Budget total d√©pens√©", f"{total_spend:,.2f} ‚Ç¨")
                    
                    if 'revenue' in marketing_df.columns:
                        with cols[2]:
                            total_revenue = marketing_df['revenue'].sum()
                            st.metric("Revenu total g√©n√©r√©", f"{total_revenue:,.2f} ‚Ç¨")
                    
                    if 'channel' in marketing_df.columns:
                        st.markdown("**üìà R√©partition par canal**")
                        channel_dist = marketing_df['channel'].value_counts()
                        st.bar_chart(channel_dist)
    
    with tab4:
        st.markdown("### üëï Donn√©es produits (T-shirts)")
        st.markdown("""
        Fichier CSV contenant les informations sur les produits.
        **Colonnes attendues** :
        - `tshirt_id` : Identifiant unique du produit
        - `category` : Cat√©gorie du produit (ex: Streetwear, Sport, etc.)
        - `style` : Style du T-shirt
        - `size` : Taille du produit
        - `color` : Couleur du produit
        - `base_price` : Prix de base du produit
        """)
        
        products_file = st.file_uploader(
            "T√©l√©verser le fichier produits (tshirts.csv)",
            type=["csv"],
            key="products_uploader"
        )
        
        if products_file is not None:
            # D√©finir les colonnes attendues et les types
            expected_columns = ['tshirt_id', 'category', 'style', 'size', 'color', 'base_price']
            numeric_columns = ['base_price']
            required_columns = ['tshirt_id', 'category', 'base_price']
            
            # Charger le fichier avec notre utilitaire
            products_df = load_csv(
                products_file,
                expected_columns=expected_columns,
                numeric_columns=numeric_columns,
                required_columns=required_columns
            )
            
            if products_df is not None:
                # Renommer base_price en price pour la coh√©rence avec le reste de l'application
                if 'base_price' in products_df.columns and 'price' not in products_df.columns:
                    products_df['price'] = products_df['base_price']
                
                # Ajouter un co√ªt par d√©faut si n√©cessaire
                if 'cost' not in products_df.columns and 'price' in products_df.columns:
                    products_df['cost'] = products_df['price'] * 0.6  # Co√ªt √† 60% du prix par d√©faut
                
                # Sauvegarder dans la session
                st.session_state.products_df = products_df
                
                # Aper√ßu des donn√©es
                with st.expander("üì¶ Aper√ßu des donn√©es produits", expanded=True):
                    st.dataframe(products_df.head())
                    
                    # Afficher des m√©triques de base
                    st.subheader("üìä Statistiques produits")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Nombre de produits", len(products_df))
                        if 'category' in products_df.columns:
                            categories = products_df['category'].nunique()
                            st.metric("Cat√©gories diff√©rentes", categories)
                    
                    with col2:
                        if 'price' in products_df.columns:
                            avg_price = products_df['price'].mean()
                            st.metric("Prix moyen", f"{avg_price:,.2f} ‚Ç¨")
                        
                        if all(col in products_df.columns for col in ['price', 'cost']):
                            products_df['margin'] = (products_df['price'] - products_df['cost']) / products_df['price']
                            avg_margin = products_df['margin'].mean()
                            st.metric("Marge moyenne", f"{avg_margin:.1%}")
                    
                    # Afficher la r√©partition par cat√©gorie si disponible
                    if 'category' in products_df.columns:
                        st.markdown("**üìä R√©partition par cat√©gorie**")
                        category_dist = products_df['category'].value_counts()
                        st.bar_chart(category_dist)

# Bouton de validation
st.markdown("---")
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    if st.button("Valider et passer √† l'analyse", type="primary", use_container_width=True):
        # V√©rifier que tous les fichiers requis sont charg√©s
        required_files = ['customers_df', 'orders_df', 'marketing_df', 'products_df']
        missing_files = [f for f in required_files if f not in st.session_state]
        
        if missing_files:
            st.error(f"Veuillez d'abord t√©l√©verser tous les fichiers requis. Manquant : {', '.join([f.replace('_df', '') for f in missing_files])}")
        else:
            # Enregistrer les donn√©es dans la session
            st.session_state.data_loaded = True
            # Rediriger vers la page d'exploration des donn√©es
            st.switch_page("pages/2_üîç_Exploration_des_donn√©es.py")

# Style CSS personnalis√©
st.markdown("""
    <style>
    /* Style des onglets */
    .stTabs [data-baseweb="tab-list"] {
        gap: 4px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: pre-wrap;
        background-color: #f0f2f6;
        border-radius: 4px 4px 0 0;
        gap: 1px;
        padding: 10px 15px;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #ffffff;
    }
    
    /* Style des expanders */
    .streamlit-expanderHeader {
        font-size: 1.1em;
        font-weight: 600;
    }
    
    /* Style des boutons */
    .stButton>button {
        border-radius: 20px;
        padding: 0.5rem 1rem;
    }
    
    /* Style des m√©triques */
    .stMetric {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 10px;
        margin: 5px 0;
    }
    
    .stMetric [data-testid="stMetricLabel"] {
        font-size: 0.9em;
    }
    
    .stMetric [data-testid="stMetricValue"] {
        font-size: 1.5em;
        font-weight: 600;
    }
    </style>
""", unsafe_allow_html=True)

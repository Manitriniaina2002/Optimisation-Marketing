"""
Module utilitaire pour l'importation robuste des fichiers CSV.
G√®re automatiquement la d√©tection du s√©parateur, l'encodage et le typage des colonnes.
"""

import pandas as pd
import chardet
from io import StringIO
import streamlit as st

def detect_separator(content):
    """D√©tecte le s√©parateur utilis√© dans le fichier CSV."""
    # Essaye de d√©tecter le s√©parateur en analysant la premi√®re ligne
    first_line = content.split('\n')[0]
    
    # Compte les occurrences de chaque s√©parateur potentiel
    separators = {',': first_line.count(','), ';': first_line.count(';'), '\t': first_line.count('\t')}
    
    # Retourne le s√©parateur le plus fr√©quent
    return max(separators.items(), key=lambda x: x[1])[0]

def detect_encoding(file_content):
    """D√©tecte l'encodage du fichier."""
    result = chardet.detect(file_content)
    return result['encoding']

def clean_column_name(column_name):
    """Nettoie le nom des colonnes en minuscules et supprime les espaces."""
    return str(column_name).strip().lower().replace(' ', '_')

def map_column_names(df, expected_columns):
    """Tente de mapper les noms de colonnes r√©els aux noms attendus."""
    # Nettoyer les noms de colonnes
    df_columns = [clean_column_name(col) for col in df.columns]
    expected_columns = [clean_column_name(col) for col in expected_columns]
    
    # Cr√©er un mapping des colonnes trouv√©es vers les colonnes attendues
    column_mapping = {}
    
    # Dictionnaire des alias courants pour les colonnes importantes
    column_aliases = {
        'order_id': ['id_commande', 'commande_id', 'num_commande'],
        'customer_id': ['client_id', 'id_client', 'customer', 'client'],
        'order_date': ['date_commande', 'date', 'dateorder', 'orderdate'],
        'amount': ['montant', 'total', 'prix_total', 'total_ttc'],
        'price': ['prix', 'prix_unitaire', 'unit_price'],
        'quantity': ['quantite', 'qte', 'qty']
    }
    
    for expected in expected_columns:
        # Essayer de trouver une correspondance exacte
        if expected in df_columns:
            column_mapping[expected] = expected
            continue
            
        # V√©rifier les alias connus
        if expected in column_aliases:
            for alias in column_aliases[expected]:
                if alias in df_columns:
                    column_mapping[expected] = alias
                    break
        
        # Si toujours pas trouv√©, essayer une correspondance partielle
        if expected not in column_mapping:
            for col in df_columns:
                if expected in col or col in expected:
                    column_mapping[expected] = col
                    break
    
    # Renommer les colonnes si n√©cessaire
    if column_mapping:
        df = df.rename(columns={v: k for k, v in column_mapping.items() if k != v})
    
    return df

def convert_date_columns(df, date_columns):
    """Convertit les colonnes de date au bon format."""
    date_converters = [
        lambda x: pd.to_datetime(x, dayfirst=True, errors='coerce'),  # Format JJ/MM/AAAA
        lambda x: pd.to_datetime(x, yearfirst=True, errors='coerce'),  # Format AAAA-MM-JJ
        lambda x: pd.to_datetime(x, format='%d/%m/%Y', errors='coerce'),
        lambda x: pd.to_datetime(x, format='%Y-%m-%d', errors='coerce'),
        lambda x: pd.to_datetime(x, format='%d-%m-%Y', errors='coerce'),
        lambda x: pd.to_datetime(x, format='%Y/%m/%d', errors='coerce')
    ]
    
    for col in date_columns:
        if col in df.columns:
            # Essayer diff√©rents formats de date
            for converter in date_converters:
                converted = converter(df[col].astype(str))
                if not converted.isna().all():  # Si au moins une conversion a r√©ussi
                    df[col] = converted
                    break
            
            # V√©rifier si la conversion a r√©ussi
            if df[col].isna().all():
                st.warning(f"‚ö†Ô∏è La colonne '{col}' n'a pas pu √™tre convertie en date. V√©rifiez le format.")
            
    return df

def convert_numeric_columns(df, numeric_columns):
    """Convertit les colonnes num√©riques au bon format."""
    for col in numeric_columns:
        if col in df.columns:
            # Sauvegarder le type original pour les messages d'erreur
            original_dtype = str(df[col].dtype)
            
            # Remplacer les virgules par des points pour les nombres d√©cimaux
            # et traiter les cha√Ænes vides comme des valeurs manquantes
            if df[col].dtype == 'object':
                df[col] = df[col].astype(str).str.replace(',', '.')
                # Remplacer les cha√Ænes vides et 'nan' par NaN
                df[col] = df[col].replace(['', 'nan', 'None', 'null'], pd.NA)
            
            # Convertir en num√©rique
            df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # V√©rifier les valeurs manquantes apr√®s conversion
            na_count = df[col].isna().sum()
            if na_count > 0:
                st.warning(f"‚ö†Ô∏è {na_count} valeurs non num√©riques d√©tect√©es dans la colonne '{col}'. Elles ont √©t√© remplac√©es par NaN.")
    
    return df

def load_csv(file_uploader, expected_columns, date_columns=None, numeric_columns=None, required_columns=None):
    """
    Charge un fichier CSV de mani√®re robuste.
    
    Args:
        file_uploader: Le fichier t√©l√©charg√© via st.file_uploader
        expected_columns: Liste des colonnes attendues
        date_columns: Liste des colonnes de date
        numeric_columns: Liste des colonnes num√©riques
        required_columns: Colonnes obligatoires (doivent √™tre pr√©sentes et non vides)
    
    Returns:
        DataFrame: Les donn√©es charg√©es ou None en cas d'erreur
    """
    if file_uploader is None:
        st.warning("Aucun fichier n'a √©t√© t√©l√©charg√©.")
        return None
    
    # Initialiser les listes vides si None
    date_columns = date_columns or []
    numeric_columns = numeric_columns or []
    required_columns = required_columns or []
    
    # Journalisation
    st.info(f"Chargement du fichier {file_uploader.name}...")
    
    try:
        # Lire le contenu brut du fichier
        file_content = file_uploader.getvalue()
        
        # D√©tecter l'encodage
        try:
            encoding = detect_encoding(file_content)
            content = file_content.decode(encoding)
        except Exception as e:
            st.error("‚ùå Impossible de d√©coder le fichier. L'encodage n'a pas pu √™tre d√©tect√©.")
            st.error(f"D√©tails de l'erreur : {str(e)}")
            return None
        
        # D√©tecter le s√©parateur
        try:
            sep = detect_separator(content)
            st.info(f"S√©parateur d√©tect√© : '{sep}'")
        except Exception as e:
            st.warning("‚ö†Ô∏è Impossible de d√©tecter le s√©parateur. Utilisation de la virgule par d√©faut.")
            sep = ','
        
        # Lire le fichier CSV
        try:
            df = pd.read_csv(StringIO(content), sep=sep, dtype=str, encoding=encoding, on_bad_lines='warn')
            st.success(f"‚úÖ Fichier charg√© avec succ√®s. {len(df)} lignes trouv√©es.")
        except Exception as e:
            st.error(f"‚ùå Erreur lors de la lecture du fichier CSV : {str(e)}")
            return None
        
        # V√©rifier si le DataFrame est vide
        if df.empty:
            st.error("‚ùå Le fichier est vide ou n'a pas pu √™tre lu correctement.")
            return None
        
        # Nettoyer les noms de colonnes
        df.columns = [clean_column_name(col) for col in df.columns]
        
        # Afficher les premi√®res lignes pour d√©bogage
        with st.expander("üîç Aper√ßu des donn√©es brutes (avant traitement)"):
            st.dataframe(df.head())
        
        # Essayer de mapper les colonnes aux noms attendus
        df = map_column_names(df, expected_columns)
        
        # Afficher le mapping des colonnes
        st.info("üìã Mapping des colonnes :")
        col_mapping = {}
        for col in expected_columns:
            col_mapping[col] = "Trouv√©e" if col in df.columns else "Manquante"
        st.json(col_mapping)
        
        # Convertir les types de donn√©es
        if date_columns:
            st.info("üîÑ Conversion des colonnes de date...")
            initial_date_cols = [col for col in date_columns if col in df.columns]
            df = convert_date_columns(df, initial_date_cols)
        
        if numeric_columns:
            st.info("üî¢ Conversion des colonnes num√©riques...")
            initial_num_cols = [col for col in numeric_columns if col in df.columns]
            df = convert_numeric_columns(df, initial_num_cols)
        
        # V√©rifier les colonnes requises
        missing_required = [col for col in required_columns if col not in df.columns]
        if missing_required:
            st.error(f"‚ùå Colonnes obligatoires manquantes : {', '.join(missing_required)}")
            st.error("Ces colonnes sont n√©cessaires pour l'analyse. Veuillez v√©rifier votre fichier.")
            return None
        
        # V√©rifier les valeurs manquantes dans les colonnes requises
        if required_columns:
            missing_values = df[required_columns].isnull().sum()
            missing_any = missing_values > 0
            
            if missing_any.any():
                st.warning("‚ö†Ô∏è Valeurs manquantes d√©tect√©es dans les colonnes requises :")
                missing_info = pd.DataFrame({
                    'Colonne': missing_values.index,
                    'Valeurs manquantes': missing_values.values,
                    '% manquants': (missing_values / len(df) * 100).round(1).astype(str) + '%'
                })
                st.dataframe(missing_info)
                
                # Demander confirmation avant de supprimer les lignes
                if st.checkbox("Supprimer les lignes avec des valeurs manquantes dans les colonnes requises ?"):
                    initial_count = len(df)
                    df = df.dropna(subset=required_columns)
                    removed = initial_count - len(df)
                    if removed > 0:
                        st.warning(f"‚ÑπÔ∏è {removed} lignes ont √©t√© supprim√©es car elles contenaient des valeurs manquantes dans les colonnes requises.")
                        st.warning(f"‚ÑπÔ∏è {len(df)} lignes restantes apr√®s nettoyage.")
                else:
                    st.warning("‚ö†Ô∏è Les valeurs manquantes peuvent affecter les analyses ult√©rieures.")
        
        # V√©rifier les colonnes critiques pour les analyses
        critical_columns = {
            'order_date': 'N√©cessaire pour les analyses temporelles',
            'amount': 'N√©cessaire pour le calcul du chiffre d\'affaires',
            'price': 'N√©cessaire si amount n\'est pas disponible',
            'quantity': 'N√©cessaire si amount n\'est pas disponible'
        }
        
        missing_critical = []
        for col, desc in critical_columns.items():
            if col not in df.columns and col in expected_columns:
                missing_critical.append(f"- {col} : {desc}")
        
        if missing_critical:
            st.warning("‚ö†Ô∏è Colonnes critiques manquantes pour certaines analyses :")
            st.markdown("\n".join(missing_critical))
        
        # G√©n√©rer des statistiques de base pour les colonnes num√©riques
        numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
        if numeric_cols:
            st.info("üìä Statistiques descriptives des colonnes num√©riques :")
            st.dataframe(df[numeric_cols].describe().round(2))
        
        # V√©rifier les dates si pr√©sentes
        date_cols = df.select_dtypes(include=['datetime64']).columns.tolist()
        if date_cols:
            st.info("üìÖ Plage de dates d√©tect√©e :")
            for col in date_cols:
                min_date = df[col].min()
                max_date = df[col].max()
                st.write(f"- {col}: de {min_date} √† {max_date} ({(max_date - min_date).days} jours)")
        
        return df
    
    except Exception as e:
        st.error(f"‚ùå Une erreur inattendue s'est produite lors du chargement du fichier : {str(e)}")
        st.error("Veuillez v√©rifier le format de votre fichier et r√©essayer.")
        import traceback
        st.text(traceback.format_exc())
        return None
